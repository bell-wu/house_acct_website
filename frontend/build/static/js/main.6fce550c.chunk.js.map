{"version":3,"sources":["logo.svg","components/NameButtonList.tsx","components/ChargeForm.tsx","components/ChargeTable.tsx","components/HomePage.tsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","NameButton","props","consumers","userId","setConsumers","useState","isSelected","setIsSelected","toggle","filter","id","type","onClick","className","NameButtonList","userIds","map","key","ChargeForm","setAddRequestActive","Form","useForm","form","onFinish","values","a","processedValues","console","log","axios","post","response","labelCol","span","wrapperCol","Item","label","name","rules","required","message","format","defaultValue","min","formatter","value","htmlType","ChargeTable","dataSource","setDataSource","useEffect","result","data","fetchData","columns","title","dataIndex","pagination","HomePage","addRequestActive","viewTableActive","setViewTableActive","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"uJAAAA,EAAOC,QAAU,IAA0B,kC,0PCU3C,SAASC,EAAWC,GAAmB,IAC7BC,EAAoCD,EAApCC,UAAWC,EAAyBF,EAAzBE,OAAQC,EAAiBH,EAAjBG,aADS,EAEEC,oBAAS,GAFX,mBAE5BC,EAF4B,KAEhBC,EAFgB,KAI9BC,EAAS,WACTF,GACFC,GAAc,GACdH,EAAaF,EAAUO,QAAO,SAAAC,GAAE,OAAIA,IAAOP,QAE3CI,GAAc,GACdH,EAAa,GAAD,mBAAKF,GAAL,CAAgBC,OAIhC,OACE,oCACGG,EAAc,kBAAC,IAAD,CAAQK,KAAK,UAAUC,QAASJ,EAAQK,UAAU,uBAAuBZ,EAAME,QAAqB,kBAAC,IAAD,CAAQQ,KAAK,UAAUC,QAASJ,EAAQK,UAAU,uBAAuBZ,EAAME,SAWzL,SAASW,EAAeb,GAAmB,IAChDc,EAAqCd,EAArCc,QAASb,EAA4BD,EAA5BC,UAAWE,EAAiBH,EAAjBG,aAE5B,OACE,oCACGW,EAAQC,KAAI,SAAAN,GAAE,OAAK,kBAACV,EAAD,CAAYG,OAAQO,EAAIR,UAAWA,EAAWE,aAAcA,EAAca,IAAKP,QChC1F,SAASQ,EAAWjB,GAAkB,IAC3CkB,EAAwBlB,EAAxBkB,oBAD0C,EAEjCC,IAAKC,UAAdC,EAF0C,sBAGdjB,mBAAS,IAHK,mBAG1CH,EAH0C,KAG/BE,EAH+B,KAkB5CmB,EAAQ,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,6DACTC,EADS,aAEbxB,UAAWA,GACRsB,GAELG,QAAQC,IAAIF,GALG,kBAOUG,IAAMC,KAAK,qCAAsCJ,GAP3D,OAOPK,EAPO,OAQbJ,QAAQC,IAAI,YAAaG,GARZ,gDAUbJ,QAAQC,IAAR,uCAVa,yDAAH,sDAcd,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,iBAzBW,CACbI,SAAU,CACRC,KAAM,GAERC,WAAY,CACVD,KAAM,KAoBN,CAEAX,KAAMA,EACNC,SAAUA,IAER,kBAAC,IAAKY,KAAN,CACEC,MAAM,YACNC,KAAK,QACLC,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,6BAEnC,kBAAC,IAAD,OAGF,kBAAC,IAAKL,KAAN,CACEC,MAAM,KACNC,KAAK,MAEL,kBAAC,IAAD,OAGF,kBAAC,IAAKF,KAAN,CACEC,MAAM,OACNC,KAAK,QAGL,kBAAC,IAAD,CAAYI,OAtDD,gBAyDb,kBAAC,IAAKN,KAAN,CACEC,MAAM,OACNC,KAAK,gBAEL,kBAAC,IAAD,OAGF,kBAAC,IAAKF,KAAN,CACEC,MAAM,aACNC,KAAK,QACLC,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,qCAEnC,kBAAC,IAAD,CACEE,aAAc,EACdC,IAAK,EACLC,UAAW,SAAAC,GAAK,kBAASA,OAG7B,kBAAC,IAAKV,KAAN,CACEC,MAAM,eACN,kBAACtB,EAAD,CAAgBC,QA3ER,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GA2EOb,UAAWA,EAAWE,aAAcA,KAGxE,kBAAC,IAAK+B,KAAN,KACE,kBAAC,IAAD,CAAQxB,KAAK,UAAUC,QAAS,kBAAMO,GAAoB,KAA1D,UACA,kBAAC,IAAD,CAAQR,KAAK,UAAUmC,SAAS,UAAhC,a,aC7FK,SAASC,IAAe,IAAD,EACE1C,mBAAS,IADX,mBAC5B2C,EAD4B,KAChBC,EADgB,KAGpCC,qBAAU,YACO,uCAAG,4BAAAzB,EAAA,sEACKI,IAAM,+BADX,OACVsB,EADU,OAGhBF,EAAcE,EAAOC,MAHL,2CAAH,qDAKfC,KACC,IAqBH,OACE,oCACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOL,WAAYA,EAAYM,QAtBrB,CACd,CACEC,MAAO,KACPC,UAAW,KACXvC,IAAK,MAEP,CACEsC,MAAO,OACPC,UAAW,OACXvC,IAAK,QAEP,CACEsC,MAAO,MACPC,UAAW,OACXvC,IAAK,SAQ8CwC,YAAY,MCjCtD,SAASC,IAAY,IAAD,EACiBrD,oBAAS,GAD1B,mBACzBsD,EADyB,KACPxC,EADO,OAEed,oBAAS,GAFxB,mBAEzBuD,EAFyB,KAERC,EAFQ,KAqBjC,OAhBMF,EACM,kBAACzC,EAAD,CAAYC,oBAAqBA,IAChCyC,EACC,oCACR,kBAAC,IAAD,CAAQjD,KAAK,UAAUC,QAAS,kBAAMiD,GAAmB,KAAzD,QACA,kBAACd,EAAD,OAGM,oCACN,kBAAC,IAAD,CAAQpC,KAAK,UAAUC,QAAS,kBAAMO,GAAqBwC,KAA3D,oBACA,kBAAC,IAAD,CAAQhD,KAAK,UAAUC,QAAS,kBAAMiD,GAAoBD,KAA1D,iBCLOE,MARf,WACE,OACE,yBAAKjD,UAAU,OACb,kBAAC6C,EAAD,QCEcK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrD,QAAQqD,MAAMA,EAAMxC,c","file":"static/js/main.6fce550c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from 'react';\nimport { Button } from 'antd';\n\n\ninterface NameProps {\n  userId: number,\n  consumers: number[],\n  setConsumers: Function,\n}\n\nfunction NameButton(props: NameProps) {\n  const { consumers, userId, setConsumers } = props;\n  const [ isSelected, setIsSelected ] = useState(false);\n\n  const toggle = () => {\n    if (isSelected) {\n      setIsSelected(false);\n      setConsumers(consumers.filter(id => id !== userId));\n    } else {\n      setIsSelected(true);\n      setConsumers([...consumers, userId]);\n    }\n  }\n\n  return (\n    <>\n      {isSelected ? (<Button type=\"primary\" onClick={toggle} className=\"nonanimating-button\">{props.userId}</Button>) : (<Button type=\"default\" onClick={toggle} className=\"nonanimating-button\">{props.userId}</Button>)}\n    </>\n  )\n}\n\ninterface ListProps {\n  userIds: number[],\n  consumers: number[],\n  setConsumers: Function,\n}\n\nexport default function NameButtonList(props: ListProps) {\n  const { userIds, consumers, setConsumers } = props; \n\n  return (\n    <>\n      {userIds.map(id => (<NameButton userId={id} consumers={consumers} setConsumers={setConsumers} key={id}/>))}\n    </>\n  )\n}","import React, { useState } from 'react';\nimport { Form, Input, InputNumber, DatePicker, Button, Space } from 'antd';\n// import moment from 'moment';\nimport axios from 'axios';\nimport NameButtonList from './NameButtonList';\n\ninterface OwnProps {\n  setAddRequestActive: Function,\n}\n\nexport default function ChargeForm(props: OwnProps) {\n  const { setAddRequestActive } = props;\n  const [ form ] = Form.useForm();\n  const [ consumers, setConsumers ] = useState([]);\n\n  const dateFormat = 'MM/DD/YYYY';\n\n  const userIds = [0, 1, 2, 3, 4, 5, 6];\n\n  const layout = {\n    labelCol: {\n      span: 8,\n    },\n    wrapperCol: {\n      span: 16,\n    },\n  };\n\n  const onFinish = async (values: any) => {\n    const processedValues = {\n      consumers: consumers,\n      ...values\n    }\n    console.log(processedValues);\n    try {\n      const response = await axios.post('http://localhost:5000/purchase/add', processedValues);\n      console.log('response:', response);\n    } catch (e) {\n      console.log(`Axios request failed: ${e}`);\n    }\n  };\n\n  return (\n    <Space>\n      <Form\n      {...layout}\n      form={form}\n      onFinish={onFinish}\n      >\n        <Form.Item\n          label=\"Your Name\"\n          name=\"buyer\"\n          rules={[{ required: true, message: 'Please input your name.' }]}\n        >\n          <Input />\n        </Form.Item>\n\n        <Form.Item\n          label=\"ID\"\n          name=\"id\"\n        >\n          <InputNumber/>\n        </Form.Item>\n\n        <Form.Item\n          label=\"Date\"\n          name=\"date\"\n        >\n          {/* <DatePicker defaultValue={moment()} format={dateFormat}/> */}\n          <DatePicker format={dateFormat}/>\n        </Form.Item>\n\n        <Form.Item\n          label=\"Item\"\n          name=\"purchaseName\"\n        >\n          <Input />\n        </Form.Item>\n\n        <Form.Item\n          label=\"Price Paid\"\n          name=\"price\"\n          rules={[{ required: true, message: 'Please input total amount paid.' }]}\n        >\n          <InputNumber\n            defaultValue={0.00}\n            min={0}\n            formatter={value => `$ ${value}`} />\n        </Form.Item>\n\n        <Form.Item\n          label=\"Split Among\">\n          <NameButtonList userIds={userIds} consumers={consumers} setConsumers={setConsumers}/>\n        </Form.Item>\n\n        <Form.Item>\n          <Button type=\"default\" onClick={() => setAddRequestActive(false)}>Cancel</Button>\n          <Button type=\"primary\" htmlType=\"submit\">Submit</Button>\n        </Form.Item>\n\n      </Form>\n    </Space>\n  )\n}\n","import React, { useEffect, useState } from 'react';\nimport { Space, Table } from 'antd';\nimport axios from 'axios';\n\nexport default function ChargeTable() {\n  const [ dataSource, setDataSource ] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await axios('http://localhost:5000/users');\n\n      setDataSource(result.data);\n    }\n    fetchData();\n  }, []);\n\n  const columns = [\n    {\n      title: 'id',\n      dataIndex: 'id',\n      key: 'id',\n    },\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      key: 'name',\n    },\n    {\n      title: '$$$',\n      dataIndex: 'owed',\n      key: 'owed',\n    },\n  ]\n\n\n  return (\n    <>\n      <Space>\n        <Table dataSource={dataSource} columns={columns} pagination={false}/>\n      </Space>\n    </>);\n}","import React, { useState } from 'react';\nimport ChargeForm from './ChargeForm';\nimport { Button } from 'antd';\nimport ChargeTable from './ChargeTable';\n\nexport default function HomePage() {\n  const [ addRequestActive, setAddRequestActive ] = useState(false);\n  const [ viewTableActive, setViewTableActive ] = useState(false);\n\n  const getComponents = () => {\n    if (addRequestActive) {\n      return (<ChargeForm setAddRequestActive={setAddRequestActive}/>)\n    } else if (viewTableActive) {\n        return (<>\n        <Button type=\"primary\" onClick={() => setViewTableActive(false)}>Home</Button>\n        <ChargeTable />\n        </>)\n    } else {\n      return (<>\n        <Button type=\"primary\" onClick={() => setAddRequestActive(!addRequestActive)}>Submit a Request</Button>\n        <Button type=\"primary\" onClick={() => setViewTableActive(!viewTableActive)}>View Charges</Button>\n        </>\n      )\n    }\n  };\n\n  return getComponents();\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport \"antd/dist/antd.css\";\nimport \"./index.css\";\nimport HomePage from './components/HomePage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HomePage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}